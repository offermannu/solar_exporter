com.zfabrik.component.type=com.zfabrik.eclipsoid.templates

template.for.$all = \
	{\
		"com.zfabrik.component.type/info":				"The type of the component- e.g: 'com.zfabrik.java'\\n\
														 The value of this property determines the\\n\
														 Component Factory that implements the\\n\
														 semantics of the component.",\
		"com.zfabrik.component.type":					"com.zfabrik.eclipsoid.z2props.proposals.ComponentNameProposals",\
		"com.zfabrik.component.dependencies/info":		"A comma-separated list of component names.\\n\
														 Components listed should implement IDependencyComponent.\\n\
														 That interface will be invoked before providing from the\\n\
														 declaring component and the declaring component will\\n\
														 depend on all listed components.",\
		"com.zfabrik.component.dependencies":			"com.zfabrik.eclipsoid.z2props.proposals.MultiComponentNameProposals",\
		"com.zfabrik.systemStates.participation/info":	"States can be reached which means that the system\\n\
														 is now able to fulfill certain tasks.\\n\
														 For example: once the system reaches the built-in\\n\
														 state 'com.zfabrik.boot.main/sysrepo_up', components\\n\
														 can use the component repository API.",\
		"com.zfabrik.systemStates.participation":		"com.zfabrik.eclipsoid.z2props.proposals.MultiSystemStateProposals",\
	}
	
template.for.com.zfabrik.any = \
	{\
		"component.className/info":				"Name of the class that implements\\n\
												 com.zfabrik.resources.provider.Resource",\
		"component.className":					"*"\
	}
	
template.for.com.zfabrik.java = \
	{\
		"java.privateReferences/info":			"Points to another java component whose public types\\n\
												 will be shared with this one (and maybe others)\\n\
												 Nothing referenced as private reference will be\\n\
												 automatically exposed to the public interface of\\n\
												 the referencing component nor to other components\\n\
												 Anything needed to compile the private types of a Java\\n\
												 component, must be referenced as a public reference,\\n\
												 be part of the public types of that component,\\n\
												 or be referenced via this reference property.\\n\
												 In other words: The private types automatically see\\n\
												 the public types and transitively anything\\n\
												 referenced publicly as described above.\\n\
												 In addition, to use more types in the 'private\\n\
												 implementation section' of a Java component, types\\n\
												 that will not be exposed to referencing components,\\n\
												 use this reference property. Components may be\\n\
												 specified as a comma-separated list. Component names\\n\
												 that have no '/' will be defaulted by appending '/java'.",\
		"java.privateReferences":				"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.privateIncludes/info":			"Points to com.zfabrik.files or com.zfabrik.java\\n\
												 components that must have a bin (or alternatively a\\n\
												 bin.api, for Java components) folder that will be\\n\
												 included into this java component's private java\\n\
												 resources. The component may also have a src (or\\n\
												 alternatively src.api, for Java components) folder\\n\
												 that will be copied before compilation into src.impl.",\
		"java.privateIncludes":					"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.publicReferences/info":			"Points to another java component whose public types\\n\
												 will be shared with this one (and maybe others).\\n\
												 Everything referenced as public reference will be visible\\n\
												 to the public interface of the referencing component\\n\
												 as well as to all referencing the referencing component.\\n\
												 In other words: References are transitive.\\n\
												 In particular, anything required to compile the public\\n\
												 types of a Java component must be referenced via this\\n\
												 reference property. Components may be specified as\\n\
												 a comma-separated list.\\n\
												 Component names that have no '/' will be defaulted\\n\
												 by appending '/java'.",\
		"java.publicReferences":				"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.publicIncludes/info":				"Points to com.zfabrik.files or com.zfabrik.java\\n\
												 components that must have a bin (or alternatively\\n\
												 a bin.api, for Java components) folder that will\\n\
												 be included into this java component's public\\n\
												 java  resources.\\n\
												 The component may also have a src (or alternatively\\n\
												 src.api, for Java components) folder that will be copied\\n\
												 before compilation into src.api.",\
		"java.publicIncludes":					"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.testReferences/info":				"Points to another java component whose public types\\n\
												 will be shared with this one (and maybe others) if the\\n\
												 execution mode, as defined by the system property\\n\
												 (see Foundation.MODE) is set to development.\\n\
												 Test references extend the private references. In\\n\
												 conjunction with the tests source folder this allows\\n\
												 to add test code and corresponding dependencies that\\n\
												 will be ignored by the runtime unless running in\\n\
												 development mode.",\
		"java.testReferences":					"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.testIncludes/info":				"Points to com.zfabrik.files or com.zfabrik.java \\n\
												 components that must have a bin (or alternatively a\\n\
												 bin.api, for Java components) folder that will be\\n\
												 included into this java component's test java\\n\
												 resources. The component may also have a src (or\\n\
												 alternatively src.api, for Java components) folder\\n\
												 that will be copied before compilation into src.test.",\
		"java.testIncludes":					"com.zfabrik.eclipsoid.z2props.proposals.MultiJavaReferenceProposals",\
		"java.compile.order/info":				"The compile order must be defined in java components\\n\
												 that also contain non-java sources - e.g. scala.\\n\
												 This property can be omitted for pure java\\n\
												 components, otherwise one has to define all\\n\
												 compilers in the right order - e.g: scala, java",\
		"java.compile.order":					"[java]",\
		"javadoc":								"*",\
		"javadoc/info":							"The property has the form 'javadoc.<jar-file-prefix>'\\n\
												 and allows to specify the javadoc location for a jar file\\n\
												 or a set of jar files starting with the same prefix. E.g:\\n\\n\
												 javadoc.commons-lang=\\\\ \\n\
												 \       http://commons.apache.org/lang/api-2.3/"\
	}
	
template.for.com.zfabrik.gitcr = \
	{\
		"gitcr.uri/info":						"The location of the repository.\\n\
												 Can be either a local path (absolute or\\n\
												 relative) or a remote git url like\\n\
												 https://git.gitorious.org/z2_base/base.git.\\n\",\
		"gitcr.uri":							"*",\
		"gitcr.user/info":						"User name for remote git repositories that\\n\
												 require authentication (can be empty).",\
		"gitcr.user":							"*",\
		"gitcr.password/info":					"Password for remote git repositories that\\n\
												 require authentication (can be empty).",\
		"gitcr.password":						"*",\
		"gitcr.branch/info":					"The git branch to be used\\n\
												 (there is no default and this property must not be empty).",\
		"gitcr.branch":							"*",\
		"gitcr.priority/info":					"The priority of this component repository.\\n\
												 Priorities are taken into account if the same\\n\
												 components with the same name are found in\\n\
												 different repositories. In this case the repository\\n\
												 with the higher priority wins (defaults to 500).",\
		"gitcr.priority":						"*",\
		"gitcr.timeout/info":					"Network timeout in seconds for all remote Git\\n\
												 operations (defaults to 10 seconds).",\
		"gitcr.timeout":						"*",\
		"gitcr.optional/info":					"If set to 'true', this git repository will be ignore silently\\n\
												 in case the defined gitcr.uri is invalid or the the \\n\
												 remote origin cannot be reached (e.g. you are offline).\\n\
											     Defaults to 'true' and should be set to 'false'\\n\
											     for productive sites.",\
		"gitcr.optional":						 "[true,false]"\
	}
	
template.for.com.zfabrik.svncr = \
	{\
		"svncr.url/info":						 "URL of the subversion root folder of the repository.\\n\
												  Something like\\n svn://z2-environment.net/z2_base/trunk/l1",\
		"svncr.url":							 "*",\
		"svncr.user/info": 						 "User name for Subversion authentication (optional)",\
		"svncr.user":							 "*",\
		"svncr.password/info":					 "Password for Subversion authentication (optional)",\
		"svncr.password":						 "*",\
		"svncr.priority/info": 					 "Priority of the repository with the repository chain.\\n\
												  Priorities are taken into account if the same\\n\
												  components with the same name are found in\\n\
												  different repositories. In this case the repository\\n\
												  with the higher priority wins (defaults to 500).",\
		"svncr.priority":						  "*"\
	}
		
template.for.javax.sql.DataSource = \
	{\
		"ds.type/info":							"The type of data source used. Supported values are\\n\
												 NativeDataSource or ZFabrikPoolingDataSource.",\
		"ds.type":								"[NativeDataSource,ZFabrikPoolingDataSource]",\
		"ds.enlist/info":						"The data source may be enlisted with the WorkUnit.\\n\
												 The WorkUnit API provides a simple way to attach\\n\
												 shared resources on the current thread of execution\\n\
												 for the time of a unit of work (typically a web\\n\
												 request, some batch job execution) as implied by\\n\
												 thread usage (see ApplicationThreadPool).\\n\
												 Supported values are 'none' and 'workUnit'.\\n\
												 Default value is workUnit.",\
		"ds.enlist":							"[workUnit,none]",\
		"ds.dataSourceClass/info":				"The data source implementation class,\\n\
												 if using NativeDataSource",\
		"ds.dataSourceClass":					"*",\
		"ds.propType.<prop-name>/info":			"Type of the property.\\n\
												 Can be int, string, or boolean.\\n\
												 Default value is string.",\
		"ds.propType.<prop-name>":				"[int,string,boolean]",\
		"ds.prop.<prop-name>/info":				"Value of the data source property to be set\\n\
												 according to its type setting above. ",\
		"ds.prop.<prop-name>":					"*",\
		"ds.props.driverClass/info":			"Name of the actual JDBC Driver implementation class.\\n\
												 E.g. 'com.mysql.jdbc.Driver' for MySQL.",\
		"ds.props.driverClass":					"*",\
		"ds.props.url/info":					"JDBC connection url",\
		"ds.props.url":							"*",\
		"ds.props.user/info":					"User name for authentication at the data base.",\
		"ds.props.user":						"*",\
		"ds.props.password/info":				"Password for authentication at the data base.",\
		"ds.props.password":					"*",\
		"ds.props.maxInUseConnections/info":	"Maximal number of connections handed out by\\n\
												 this pool. This number may be used to limit\\n\
												 database concurrency for applications.\\n\
												 Requesting threads are forced to wait for\\n\
												 freed connections if this limit has been\\n\
												 exhausted.\\n\
												 Make sure threads are not synchronized on\\n\
												 shared resources when requesting connections\\n\
												 and when this limit is less than your\\n\
												 theoretical application concurrency as this\\n\
												 may lead to thread starvation.",\
		"ds.props.maxInUseConnections":			"*",\
		"ds.props.maxSpareConnections/info":	"Number of connection held although not\\n\
												 currently used by the applications.",\
		"ds.props.maxSpareConnections":			"*",\
		"ds.props.connectionExpiration/info":	"Connections will be closed after this number of\\n\
												 milliseconds has expired since creation and when\\n\
												 returned to the pool. This setting can be used\\n\
												 to make sure stale connections get evicted\\n\
												 although not detected otherwise by the pool.",\
		"ds.props.connectionExpiration":		"*",\
		"ds.props.connectionMaxUse/info":		"Connections will be closed after this number of\\n\
												 times they have been handed out from the pool\\n\
												 and when returned to the pool. This setting can be\\n\
												 used to make sure connections only serve a limited\\n\
												 number of requests.",\
		"ds.props.connectionMaxUse":			"*"\
	}